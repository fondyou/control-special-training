//本文结构：  C语言的地址空间  +  C语言变量的作用域，生存时间  +  函数传参（传值，传址）  +   函数内分配的变量，在离开后释放的问题  +  变量的初始化问题

/*1.eg*/
/***********说明C语言的地址空间问题，变量存放的区域****************/
#include <stdio.h>
int GlobalInit = 10;  //以初始化的全局变量
int GlobalNotInit;    //未初始化的全局变量

int add(int a,int b)
{
	int AutoAdd = 1;
	printf("AutoAdd  = %p\n",AutoAdd);
	return (a + b);
	
}

int main()
{
	int AutoMain = 0;
	int *MllocPtr;
	int a=1,b=1;
	
	MllocPtr = malloc(sizeof(int)); 

	printf("GlobalInit = %p\n",GlobalInit);
	printf("GlobalNotInit = %p\n",GlobalNotInit);
	printf("AutoMain = %p\n",AutoMain);
	printf("MllocPtr = %p\n",MllocPtr);  //打印4种类型变量的地址，在对应到图上
	
	printf("%d\n",add(a,b));
	
	free(ptr);
	return 0;
}
程序运行结果：
	GlobalInit = 0x804a01c
	GlobalNotInit = 0x804a028
	AutoMain = 0xbff4c900
	MllocPtr = 0x8201008
	AutoAdd  = 0xbff4c8dc          //反映了不同类型的变量存放在不同的区域

/*2.eg*/
/***********说明C语言变量的作用域，生存时间****************/  //画第二张图（有堆栈的那个）
#include <stdio.h>
int GlobalInit = 10;  
int GlobalNotInit;   

int add(int a,int b)
{
	int AutoAdd = 1;
	static AutoStatic = 1; //静态变量               
	printf("access GlobalInit = %d\n",GlobalInit);
	printf("access GlobalNotInit = %d\n",GlobalNotInit);  //在函数中访问全局变量
	//printf("access *MllocPtr = %d\n",*MllocPtr);  	      //在函数中访问动态分配的变量，但是该地址一直有效

	//printf("access AutoMain = %d\n",AutoMain);          //测试能不能访问mian中的自动变量
	return (a + b);
	
}

int main()
{
	int AutoMain = 0;
	int *MllocPtr;
	int a=1,b=1;
	
	MllocPtr = malloc(sizeof(int)); 
	*MllocPtr = 1;
	printf("%d\n",add(a,b));
	
	//printf("access AutoStatic = %d\n",AutoStatic);     //测试能不能访问add中的静态变量
	free(ptr);
	return 0;
}
//得出结论：在变量存放在不同的地址空间，就绝对了生存时间，已经作用范围。特别是函数的堆栈。
//留出一个问题：static AutoStatic = 1; //静态变量 存放在地址空间的哪个区域中。



/*3.eg*/
/***********说明函数传参（传值，传址），****************/   
#include <stdio.h>

void exchange_addr(int *a,int *b)   //函数栈+指针
{
	int store;
	store = *a;
	*a = *b;
	*b = store;
	
}
void exchange_value(int a,int b)
{
	int store;
	store = a;
	a = b;
	b = store;
}
int main()
{
	int a=1,b=3;
	exchange_addr(&a,&b);
	printf("a=%d  b=%d\n",a,b);   

	a=1;
	b=3;
	exchange_value(a,b);
	printf("a=%d  b=%d\n",a,b);
	return 0;
}

/*4.eg*/
/***********函数内分配的变量，在离开后释放的问题****************/   
#include <stdio.h>

int * invalid_array(void)
{
	int array[10];
	int i;
	for(i=0;i<10;i++)
		array[i] = i;
	return array;   //返回该数组的首地址
}

int main()
{
	int *ptr =invalid_array();
	printf("array[0]=%d\n",*ptr);   
	printf("array[1]=%d\n",*(ptr+1));    //并不会的到实际效果，应为那片内存已经释放掉了
}

/*5.eg*/
/***********说明变量的初始化问题，数组可能产生的覆盖问题，在函数中数组使用的一般方法****************/   
//对于未初始化的全局变量直接会初始化为0，未静态变量（static）同样会被初始化为0
//自动分配（auto)的变量如果未初始化就是一个随机值。
#include <stdio.h> 
int GlobalNotInit;   

void uninit_var(void)
{
	int i;  //一般默认ij变量为循环变量
	int AutoVar ;
	static StaticVar;
	int array[10];
	printf("defualt value AutoVar = %d\n",AutoVar);
	printf("defualt value StaticVar = %d\n",StaticVar);
	for(i=0;i<10;i++)
		printf("defualt value array[%d] = %d\n",i,array[i]);    

}

int main()
{
	printf("defualt value GlobalNotInit = %d\n",GlobalNotInit);
	
	uninit_var();
	return 0;
}
//得出结论：对于自动变量，在使用前必须初始化，否则会影响程序运行
//特别注意数组，结构体，在使用前一段要初始化
数组使用规范：
	int array[10];
	memset(array,0,sizeof(array));

	struct student stu;
	memset(stu,0,sizeof(stu));     //均为直接清零
//注意不要太死板，如过程序中用初始化值，那么就不要清零 ：如  int i；     for(i=0;i<10;i++)  //在使用前一刻才将i初始化为0